package org.openlmis.core.service.notification.view;

import com.itextpdf.text.Document;
import com.itextpdf.text.pdf.*;
import org.krysalis.barcode4j.impl.upcean.EAN13Bean;
import org.krysalis.barcode4j.output.bitmap.BitmapCanvasProvider;
import org.openlmis.core.dto.notification.StockOutNotificationDTO;
import org.openlmis.core.service.MessageService;

import java.awt.image.BufferedImage;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;

public class NotificationEventPageHandler  extends PdfPageEventHelper {

    public static final int PAGE_TEXT_WIDTH = 100;
    public static final int PAGE_TEXT_HEIGHT = 100;
    public static final float FOOTER_TEXT_SIZE = 10f;
    private final MessageService messageService;

    protected BaseFont baseFont;
    private PdfTemplate pageNumberTemplate;
    private static final DateFormat DATE_FORMAT = new SimpleDateFormat("dd/MM/yyyy");
    private float textAdjustment;
    private StockOutNotificationDTO notification;

    public NotificationEventPageHandler(MessageService messageService, Map<String, Object> model) {
        super();
        this.messageService = messageService;

        this.notification = (StockOutNotificationDTO) model.get("notification");

        try {
            baseFont = BaseFont.createFont();
            textAdjustment = baseFont.getWidthPoint("0", FOOTER_TEXT_SIZE);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }


    @Override
    public void onEndPage(PdfWriter writer, Document document) {
        addPageFooterInfo(writer, document);
    }

    @Override
    public void onOpenDocument(PdfWriter writer, Document document) {
        pageNumberTemplate = writer.getDirectContent().createTemplate(PAGE_TEXT_WIDTH, PAGE_TEXT_HEIGHT);
    }

    @Override
    public void onCloseDocument(PdfWriter writer, Document document) {
        pageNumberTemplate.beginText();
        pageNumberTemplate.setFontAndSize(baseFont, FOOTER_TEXT_SIZE);
        pageNumberTemplate.setTextMatrix(0, 0);
        pageNumberTemplate.showText(String.valueOf(writer.getPageNumber() - 1));
        pageNumberTemplate.endText();
    }

    @Override
    public void onStartPage(PdfWriter writer, Document document) {
        PdfContentByte contentByte = writer.getDirectContent();

       // addBarcord(document, contentByte);

    }

    private void addBarcord(Document document, PdfContentByte contentByte) {

        final float width = document.getPageSize().getWidth();
        contentByte.setTextMatrix(width /2, document.bottom());

        contentByte.showText(generateEAN13BarcodeImage("123456789012").toString());

    }

    private void addPageFooterInfo(PdfWriter writer, Document document) {

        PdfContentByte contentByte = writer.getDirectContent();
        contentByte.saveState();

        contentByte.setFontAndSize(baseFont, FOOTER_TEXT_SIZE);

        contentByte.beginText();
        writeCurrentDate(document, contentByte);
        writeGeneratedBy(document,contentByte);
        writePageNumber(writer, document, contentByte);
        contentByte.endText();

        contentByte.restoreState();
    }

    private void writeGeneratedBy(Document document, PdfContentByte contentByte) {
        final float width = document.getPageSize().getWidth();
        contentByte.setTextMatrix(width /2 + textAdjustment, document.bottom());

        String generatedText = "Generated By: eLMIS ";
        contentByte.showText(generatedText);
    }

    private static BufferedImage generateEAN13BarcodeImage(String barcodeText) {

        EAN13Bean barcodeGenerator = new EAN13Bean();
        BitmapCanvasProvider canvas =
                new BitmapCanvasProvider(160, BufferedImage.TYPE_BYTE_BINARY, false, 0);

        barcodeGenerator.generateBarcode(canvas, barcodeText);
        return canvas.getBufferedImage();
    }

    private void writeCurrentDate(Document document, PdfContentByte contentByte) {
        contentByte.setTextMatrix(document.left() + textAdjustment, document.bottom());
        String dateText = DATE_FORMAT.format(new Date());
        contentByte.showText(dateText);
    }

    private void writePageNumber(PdfWriter writer, Document document, PdfContentByte contentByte) {
        String pageNumberText = messageService.message("label.page.of", writer.getPageNumber()) + " ";
        float pageNumberTextSize = baseFont.getWidthPoint(pageNumberText, FOOTER_TEXT_SIZE);
        contentByte.setTextMatrix(document.right() - pageNumberTextSize - textAdjustment, document.bottom());
        contentByte.showText(pageNumberText);
        contentByte.addTemplate(pageNumberTemplate, document.right() - textAdjustment, document.bottom());
    }


}
